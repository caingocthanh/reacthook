(1): Tính năng mới của React 16.8, sử dụng trạng thái và những tính năng khác của React
không cần sử dụng Class trong trường hợp này.
(2): Khi nâng cấp React from version cũ thì nên upgrade toàn bộ packget hiện có.
Riêng React Native sẽ hỗ trợ Hook mở phiên bản kế tiếp.
(3): Hook sinh ra không phải để thay thế Class
(4): Cho phép tái sử dụng sateful mà không cần fix cấp bật component
(5): Phân chia một component complex thành những function smaller dựa trên những
thứ có liên quan (
    Ex: Cài đặt subscripting
        Fetching data
)

================Nhược điểm của React===================
(1): Tái sử dụng logic sateful giữa các component
(2): Wrapper hell
(3): Các thành phần phức tạp trở nên khó hiểu
blabla...bla=> Ghi nhiều quá, đọc hơi buồn ngủ
=============LET'S GO=====================Chi tiết về Hook
- Là một function sử dụng để móc vào state React và tính năng vòng đời sống from component function
- Không làm việc trong một Class
- Là function JS
- React cung cấp một số hook được xây dựng trong React: 
    + useState.
    + Effect Hook = useEffect
- Nguyên tắc của Hook
    + Gọi ở top level, không gọi trong loop, coditions, function lồng
    + Gọi từ React function component, không gọi từ function js bình thường
==========================================
=========================================
use Hook state
-> Hook là một function cho phép chúng ta móc vào tính năng của React
-> Trong trường hợp này, ta sử dụng hook sẵn có của React: useState
-> Mục đích sử dụng hook: useState
    - Thêm trạng thái react đến function component (stateless)
    ※ Trước đây, tại các node này không sử dụng được trạng thái.
    Không chứa trạng thái bên trong, mà được điều khiển thông qua class component parent
-> Khi nào thì sử dụng Hook: 
    - Trong component function thì không có "ĐÍT(this)"
nên không thể gọi hay độc [this.state....] vì vậy ta sử dụng [useState] thay thế
-> Gọi để làm gì?
    - Trích suất dữ liệu cái mà do this.state cung cấp trong class
    - Thông thường nó sẽ biến mất khi ra khỏi function, biến trạng thái vẫn được React bảo toàn
-> Chúng ta sẽ làm gì để pass qua useState như một argument? 
    - Có thể có nhiều hơn một đối số
    - Ở trạng thái này thì nó được xem là trạng thái khởi tạo mới khi function được chạy
    - Không giống như class, trạng thái không làm một Object mà là:
        + Là giá trị bất kỳ: number, string,...thứ mà chúng ta cần
        + Trong ví dụ, ta cần trả về number cho mỗi lần click
-> useState return cái gì?
    - Trả về cặp giá trị:
        (1): Trạng thái hiện tại của count
        (2): function update state setCount
    - Đó là lý do tại sao chúng ta ghi theo kiểu: 
    [count, setCount]=useState()
Tương đương trong class sẽ là:
    this.state.count
    this.setState({})
-> Làm thế nào để đọc trạng thái
    - Class: this.state.count
    - function: {count}
-> Làm thể nào update state
    - Class: this.setState({})
    - function: gọi setCount()
-> Giải thích về khai báo: const [count, setCount]=useState(0);
    - count, setCount là đặt tên tùy ý
    - Return cặp: count và function cập nhật count: setCount
    - tạo 2 biến, 1 là count, 2 là setCount,
count thì được set mặc định 0, setCount sẽ tiến hành cập nhật count
khi có yêu cầu.
Việc khai báo bên trên thì tương tự như viết thông thường bên dưới (gọi là array destructuring)
    var updatecount=useState(0);
    var count=updatecount[0];
    var setCount=updatecount[1];
với cách khai báo bên trên, nghĩa đen thì return một array 2 phần từ.
Ta có thể truy cập vào kết quả return với index của nó.
-> Làm thế nào tạo ra nhiều state?
    - Dựa trên việc định nghĩa trạng thái như một pair [something, setsomething], cho phép ta:
        + Tùy biến những cập state khác nhau.
        + Update tự do state bất kỳ và bất cứ đâu trong function top-level
        + Ví dụ, trong một function component có thể có nhiều state
            function Ex(){
                const [age, setAge]=useState(32);
                const [todos, settodos]=useState([{text:'Learn hook'}]);
            }
    - Tuy nhiên, trong trường hợp có quá nhiều thứ để tracked, thì việc khai báo
state có vẻ sẽ dài dòng và cồng kềnh.
Sloved: 
    - Cho phép dữ Objects hoặc Array. Vì vậy, ta có thể group các nhóm với nhau.
-> Không giống như trong class, update trạng thái mà quá trình merge.
Trong function, việc update là quá trình replace.
=========================================
Chốt bos cuối:
    - Hook là một function để gắn một tính năng của React vào trong một function component
    - Hook chỉ được sử dụng ở:
        + function top-level, 
    - Hook không sử dụng trong: 
        + class / js function regular
        + call trong condition
        + call trong nested function
    - Để sử dụng một hook của React cần import tên hook từ thư việc react
    - Hook được khai báo dạng [Array destructuring] tương ứng với kiểu trả về là một cặp giá trị gồm:
        + Biến lưu trữ trạng thái hiện tại
        + Method thực thi biến lưu trữ trạng thái.
    - Trong function component không có object gọi là this. Vì vậy, toàn bộ body của function component sẽ không tồn tại [this]
    - Việc khai báo hook có thể là một list object, array
    - Nên hay không nên SPLIT/GROUP khai báo biến tương ứng cho từng trạng thái thì cần xem FAQ để nắm.
    - Có thể đọc trạng thái hiện tại trực tiếp từ biến lưu trữ trạng thái mà không cần thông qua this.setState như class
    - Có thể set trạng thái mới ở bất kỳ đâu trong body của function component mà không cần thông qua this.setState như Class
    - Giải quyết được vấn đề khi cần tracked + updated state trong một function component
    - Việc update state là quá trình replace không phải merge
+================================++++++++++++++++++++++++++++++++++++++
Kế tiếp, xem sự vi diệu của một hook khác: Effect Hook
-> Nó là gì???
    - Cho phép thực hiện phía hiệu ứng trong function component, xảy ra ngay sau khi mount phần từ DOM hoàn thành
    - Hiệu ứng có thể là:
        + Sau khi Data Fetching
        + Sau khi Setup a subscripting
        + Sau khi Thay đổi thủ công DOM
-> Phân loại side Effect
    - Effect không cần dọn dẹp: 
        + Ví dụ:
            (1): Yêu cầu network
            (2): Đột biến thủ công DOM
            (3): Ghi log
Tiến hành so sánh cách thực hiện Effect giữa Class và Hook
        + Trong lớp
            -> Render không phải là một loại side Effect, đơn giản vì side Effect sẽ xảy ra khi quá trình render hoàn thành.
Vì vậy, các side Effect trong lớp người ta để trong componentDidMount và componentDidUpdate.
Trên thực tế, người ta muốn sau  khi render thực thi thì sẽ áp dụng side Effect.
Tuy nhiên, class component nó không có method làm chuyện đó. Để làm thì cần phải
add vào cả componentDidMount và componentDidUpdate.
            => Chốt nãy giờ nói dong dài: Trong class component, để làm được chuyện
tích hợp side Effect thì cần thông qua 2 component high-level component. Việc này vừa tạo
cho code dư thừa và thiếu minh bạch.
        + Effect Hook: thì khác.
            -> Khi chúng ta gọi nó trong function component, ý bảo React hãy tiến hành công việc đó cho tao, sau khi mày render xong.
Khi nhận mệnh lệnh, React sẽ tiến hành ghi nhớ function và sẽ gọi ngay khi nó update xong DOM
Trong ví dụ, chúng ta chỉ đơn giả là update title thông qua API browser.
Trên thực tế, chúng ta có thể làm nhiều hơn trong body của Effect hook.
        + Fetching Data
        + Thực hiện nhiều API khác nè

-> Tại sao useEffect được gọi bên trong component?
    - Tại vì useEffect cần truy cập đến state/ props của Effect
    - Không cần API chi tiết để đọc Effect, nó đã bao gồm trong đó.
    - Hook chỉ lấy các bao đóng của js, không quan tâm React API cụ thể,
khi Js đã cung cấp giải pháp

-> Có phải Effect sẽ chạy sau mỗi render?
    - Chính xác là cả lần chạy đầu tiên và mỗi lần re-render
    - Khi sử dụng Mounting và Updating, chúng ta chưa chắc chắn đc việc render đã OK
Nhưng khi sử dụng useEffect, chúng ta chắc chắn rằng, nó chỉ xảy ra khi quá trình
render thật sự hoàn tất.

    - Effect cần dọn dẹp.
        + Ví dụ:
            (1): Setup một subscripting đến một vài datasource bên ngoài.
            Chúng ta cần dọn dẹp để tránh bộ nhớ bị rò rỉ 
Tiến hành so sánh Hook và React để làm rõ vấn đề.
        + Class:
            (1): Vẫn cần 2 phương thức để xử lý là componentDidMount và componentWillUnmount
            (2): Code vẫn còng kềnh như trường hợp Effect not clean
        + Hook:
            (1): Vẫn chỉ cần một function hook: useEffect để xử lý công việc.
            (2): Tiến hành định nghĩa method: 
                handleStatusChange -> subscribeToFriendStatus để subscripting khi trạng thái isOnline changed.
                cleanup -> unsubscribeFromFriendStatus
-> Tại sao chúng ta return function từ Effect của chúng ta?
[?]     - Chỉ là một cơ chế dọn dẹp cho Effect dạng option, cho phép thêm/xóa các liên
kết gần nhau mà vẫn giữ được logic. Chúng làm một phần của hiệu ứng tương tự.
-> Chính xác thì khi nào React sẽ dọn dẹp một Effect?
        - React thực hiện dọn dẹp khi một component unmount
        - Tuy nhiên, theo như trước đây thì Effect sẽ chạy ở mỗi lần render chứ không
chỉ chạy có một lần, điều này cho thấy React cũng tiến hành dọn dẹp cả cái Effect trước, Trước
khi chạy Effect kế tiếp.
[※]Effect không trả về một function named,
ta chỉ gọi nó với mục đích dọn dẹp. Nhưng, ta có thể tra về một function với mũi 
tên và gọi bất cứ thứ gì khác từ kết quả trả về.
=============
Chốt về useEffect:
-> Thể hiện một Effect sau khi một component được render
-> Một vài Effect yêu cầu cleanup thì sẽ trả về một function
-> Nếu Class được phân ra ở componentDidMount và componentWillUnmount thì useEffect sẽ bao gồm toàn bộ function cleanup
-> Một Effect không cần cleanup thì không cần return
-> in-depth: Chuyên sâu hơn về useEffect.
    =>
